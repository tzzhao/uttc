{"version":3,"sources":["store/actions.js","utils/player.js","store/selectors.js","components/Shape/Shape.jsx","components/Cell/Cell.jsx","components/Grid/Grid.jsx","components/Board/Board.jsx","components/Winner/Winner.jsx","App.jsx","serviceWorker.js","store/state.js","store/reducers.js","store/store.js","index.js"],"names":["playMoveAction","gridId","cellId","type","payload","isNeutralOrDraw","id","isFinished","getBigGridState","createSelector","state","gameState","map","gridState","getWinner","getPlayableGrids","history","current","bigGridState","length","lastPlay","reduce","acc","currentValue","index","getGameWinner","winner","score0","score1","hasGameFinished","row_0","row_1","row_2","column_0","column_1","column_2","centerCell","some","v","shape","Shape","props","src","process","isBlackBackground","Cell","connect","value","isClickable","val","nextPlayer","dispatch","ownProps","playMove","className","onClick","Grid","cells","key","Board","Winner","startAgain","App","previousAction","nextAction","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","INITIAL_STATE","getUpdatedState","newGameState","slice","push","getPreviousState","currentHistory","lastMove","getNextState","nextMove","store","createStore","action","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e5d9d691.chunk.js","sourcesContent":["export const PLAY_MOVE_ACTION_TYPE = 'Play Move Action';\n\nexport function playMoveAction(gridId, cellId) {\n  return {type: PLAY_MOVE_ACTION_TYPE, payload: {gridId, cellId}};\n}\n\n\nexport const RESET_ACTION_TYPE = 'Reset game state Action';\nexport function resetAction() {\n  return {type: RESET_ACTION_TYPE};\n}\n\nexport const PREVIOUS_ACTION_TYPE = 'Previous Action';\nexport function previousAction() {\n  return {type: PREVIOUS_ACTION_TYPE};\n}\n\nexport const NEXT_ACTION_TYPE = 'Next Action';\nexport function nextAction() {\n  return {type: NEXT_ACTION_TYPE};\n}\n","export const PLAYER_0 = 0;\nexport const PLAYER_1 = 1;\nexport const NEUTRAL = -1;\nexport const DRAW = -2;\n\nexport const isNeutralOrDraw = (id) => id === NEUTRAL || id === DRAW;\nexport const isFinished = (id) => id !== NEUTRAL;\n","import {createSelector} from 'reselect';\nimport {DRAW, isFinished, isNeutralOrDraw, NEUTRAL, PLAYER_0, PLAYER_1} from \"../utils/player\";\n\nconst getGameState = state => state.gameState;\nconst getHistory = state => state.history;\nconst getCurrent = state => state.current;\n\nexport const getBigGridState = createSelector([getGameState], (gameState) => {\n  return gameState.map(gridState => getWinner(gridState));\n});\n\nexport const getPlayableGrids = createSelector([getHistory, getBigGridState, getCurrent], (history, bigGridState, current) => {\n  if (history.length === 0 || current === -1) return [0,1,2,3,4,5,6,7,8];\n  const lastPlay = history[current];\n  if (bigGridState[lastPlay.cellId] === NEUTRAL) return [lastPlay.cellId];\n  return bigGridState.reduce((acc, currentValue, index)=> currentValue === NEUTRAL ? [...acc, index] : acc, []);\n});\n\nexport const getGameWinner = createSelector([getBigGridState], (bigGridState) => {\n  const winner = getWinner(bigGridState);\n  if (winner === DRAW) {\n    const score0 = bigGridState.reduce((acc, currentValue) => acc + (currentValue === 0), 0);\n    const score1 = bigGridState.reduce((acc, currentValue) => acc + (currentValue === 1), 0);\n    if (score0 === score1) {\n      return DRAW;\n    } else if (score0 < score1) {\n      return PLAYER_0;\n    } else {\n      return PLAYER_1;\n    }\n  }\n  return winner;\n});\n\nexport const hasGameFinished = createSelector([getGameWinner], winner => isFinished(winner));\n\nconst getWinner = (gridState => {\n  // Check rows and columns\n  for (let index = 0; index < 3; index++) {\n    const row_0 = gridState[index * 3];\n    const row_1 = gridState[index * 3 + 1];\n    const row_2 = gridState[index * 3 + 2];\n    const column_0 = gridState[index];\n    const column_1 = gridState[index + 3];\n    const column_2 = gridState[index + 6];\n    if (!isNeutralOrDraw(row_0) && row_0 === row_1 && row_1 === row_2) {\n      return row_0;\n    }\n    if (!isNeutralOrDraw(column_0) && column_0 === column_1 && column_1 === column_2) {\n      return column_0;\n    }\n  }\n\n  const centerCell = gridState[4];\n  if (!isNeutralOrDraw(centerCell)) {\n    // Check diagonals\n    if (gridState[0] === centerCell && centerCell === gridState[8]) {\n      return centerCell;\n    }\n    if (gridState[2] === centerCell && centerCell === gridState[6]) {\n      return centerCell;\n    }\n  }\n\n  // Return -1 if no winner\n  return gridState.some(v => v === -1) ? NEUTRAL : DRAW;\n});\n","import React from \"react\";\n\nexport const CIRCLE = 0;\nexport const CROSS = 1;\nconst shape = ['circle', 'cross'];\n\nexport const Shape = (props) => (\n    <img src={`${process.env.PUBLIC_URL}/assets/${shape[props.shape]}_${props.isBlackBackground ? 'orange' : 'black'}.svg`} />\n);\n","import React from 'react';\nimport {playMoveAction} from \"../../store/actions\";\nimport {connect} from \"react-redux\";\nimport {getPlayableGrids, hasGameFinished} from \"../../store/selectors\";\nimport {Shape} from \"../Shape/Shape\";\n\nconst CellWithoutStore = (props) => {\n  const isBlackBackground = props.gridId % 2 === 0;\n  return (<div className=\"cell-container\">\n        <div className={`cell ${isBlackBackground ? 'bg-black' : 'bg-orange'} ${props.isClickable ? 'clickable' : ''}`}\n             onClick={() => props.isClickable && props.playMove()}>\n          {props.value !== -1 ? <Shape shape={props.value} isBlackBackground={isBlackBackground}/>\n          : props.isClickable ? <Shape shape={props.nextPlayer} isBlackBackground={isBlackBackground}/>\n          : null}\n        </div>\n      </div>);\n};\n\nconst mapStateToProps = (state, props) => {\n  const value = state.gameState[props.gridId][props.cellId];\n  return {\n    isClickable: getPlayableGrids(state).some(val => val === props.gridId && value === -1) && !hasGameFinished(state),\n    value,\n    nextPlayer: state.nextPlayer\n  }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  playMove: () => {\n      dispatch(playMoveAction(ownProps.gridId, ownProps.cellId))\n  }\n});\n\nexport const Cell = connect(mapStateToProps, mapDispatchToProps)(CellWithoutStore);\n","import React from 'react';\nimport {Cell} from \"../Cell/Cell\";\nimport {playMoveAction} from \"../../store/actions\";\nimport {connect} from \"react-redux\";\nimport {getBigGridState} from \"../../store/selectors\";\nimport {Shape} from \"../Shape/Shape\";\n\nlet GridWithoutState = (props) => {\n  const isBlackBackground = props.gridId % 2 === 0;\n  const cells = [0,1,2,3,4,5,6,7,8].map(index => <Cell key={index} gridId={props.gridId} cellId={index} />);\n  return (<div className=\"grid\">\n            {props.value === 0 || props.value === 1 ?\n                <div className={`cells-container ${isBlackBackground ? 'bg-black' : 'bg-orange'}`}><Shape shape={props.value} isBlackBackground={isBlackBackground}/></div>\n                : cells}\n          </div>);\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n    value: getBigGridState(state)[props.gridId]\n  }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  playMove: () => {\n    dispatch(playMoveAction(ownProps.gridId, ownProps.cellId))\n  }\n});\n\nexport const Grid = connect(mapStateToProps, mapDispatchToProps)(GridWithoutState);\n","import React from 'react';\nimport {Grid} from \"../Grid/Grid\";\n\nexport function Board(props) {\n  const grids = [0,1,2,3,4,5,6,7,8].map(index => <div key={index} className=\"grid-container\"><Grid gridId={index} /></div>);\n  return grids;\n}\n","import {Shape} from \"../Shape/Shape\";\nimport React, {Fragment} from \"react\";\n\nexport function Winner(props) {\n  return <div className=\"winner-modal\">\n    <div className=\"winner-overlay\" />\n    <div className=\"winner-modal-container\">\n      <div className=\"winner-message\">\n        {props.winner === -2 ?\n            <div>It's a draw !</div>\n        : <Fragment><div className=\"shape-container\"><Shape shape={props.winner} /></div>\n            <div>Won !</div>\n        </Fragment>}\n      </div>\n      <button onClick={props.startAgain}>New Game</button>\n    </div>\n  </div>;\n}\n","import React from 'react';\nimport './App.css';\nimport {Board} from \"./components/Board/Board\";\nimport {nextAction, previousAction, resetAction} from \"./store/actions\";\nimport {getGameWinner} from \"./store/selectors\";\nimport {connect} from \"react-redux\";\nimport {isFinished} from \"./utils/player\";\nimport {Winner} from \"./components/Winner/Winner\";\n\nlet App = ({startAgain, previousAction, nextAction, ...props}) => {\n  return (\n      <div className=\"app-container\">\n        <header>\n          <div><h1>Ultimate Tic Tac Toe</h1></div>\n          <div className=\"button-group\">\n            <button onClick={startAgain}>New Game</button>\n            <button onClick={previousAction}>Undo move</button>\n            <button onClick={nextAction}>Redo move</button>\n          </div>\n        </header>\n        <div className=\"App\">\n          <Board />\n        </div>\n        {isFinished(props.winner) ? <Winner startAgain={startAgain} winner={props.winner} /> : null}\n      </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  startAgain: () => dispatch(resetAction()),\n  previousAction: () => dispatch(previousAction()),\n  nextAction: () => dispatch(nextAction())\n});\n\nconst mapStateToProps = (state) => ({\n  winner: getGameWinner(state)\n});\n\nApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar count = 0;\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const INITIAL_STATE = {\n  nextPlayer: 0,\n  gameState: [[-1,-1,-1,-1,-1,-1,-1,-1,-1],\n    [-1,-1,-1,-1,-1,-1,-1,-1,-1],\n    [-1,-1,-1,-1,-1,-1,-1,-1,-1],\n    [-1,-1,-1,-1,-1,-1,-1,-1,-1],\n    [-1,-1,-1,-1,-1,-1,-1,-1,-1],\n    [-1,-1,-1,-1,-1,-1,-1,-1,-1],\n    [-1,-1,-1,-1,-1,-1,-1,-1,-1],\n    [-1,-1,-1,-1,-1,-1,-1,-1,-1],\n    [-1,-1,-1,-1,-1,-1,-1,-1,-1]],\n  history: [],\n  current: -1\n};\n","import {PREVIOUS_ACTION_TYPE, PLAY_MOVE_ACTION_TYPE, RESET_ACTION_TYPE, NEXT_ACTION_TYPE} from \"./actions\";\nimport {INITIAL_STATE} from \"./state\";\nimport {NEUTRAL} from \"../utils/player\";\n\nexport const reducers = (state = INITIAL_STATE, action) => {\n  switch(action.type) {\n    case PLAY_MOVE_ACTION_TYPE:\n      const {gridId, cellId} = action.payload;\n      return getUpdatedState(state, gridId, cellId);\n    case RESET_ACTION_TYPE:\n      return INITIAL_STATE;\n    case PREVIOUS_ACTION_TYPE:\n      return getPreviousState(state);\n    case NEXT_ACTION_TYPE:\n      return getNextState(state);\n    default:\n      return state;\n  }\n};\n\nconst getUpdatedState = (state, gridId, cellId) => {\n  const nextPlayer = state.nextPlayer;\n  const newGameState = state.gameState.map(gridState => [...gridState]);\n  newGameState[gridId][cellId] = nextPlayer;\n  const current = state.current;\n  const history = state.history.slice(0, current + 1);\n  history.push({gridId, cellId});\n  const newState = {...state, nextPlayer: 1 - nextPlayer, gameState: newGameState, history, current: current + 1};\n  return newState;\n};\n\nconst getPreviousState = (state) => {\n  const currentHistory = state.history;\n  const current = state.current;\n  if (currentHistory.length === 0 || current < 0) {\n    return state;\n  }\n  const newGameState = state.gameState.map(gridState => [...gridState]);\n  const lastMove = currentHistory[current];\n  newGameState[lastMove.gridId][lastMove.cellId] = NEUTRAL;\n  return {...state, nextPlayer: 1 - state.nextPlayer, gameState: newGameState, current: current - 1};\n};\n\nconst getNextState = (state) => {\n  if (state.history.length <= state.current + 1) {\n    return state;\n  }\n  const newGameState = state.gameState.map(gridState => [...gridState]);\n  const nextMove = state.history[state.current + 1];\n  newGameState[nextMove.gridId][nextMove.cellId] = state.nextPlayer;\n  return {...state, nextPlayer: 1 - state.nextPlayer, gameState: newGameState, current: state.current + 1}\n};\n","import {reducers} from \"./reducers\";\nimport {INITIAL_STATE} from \"./state\";\nimport {createStore} from \"redux\";\n\nexport const store = createStore(reducers, INITIAL_STATE,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}